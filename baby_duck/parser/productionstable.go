// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "fmt"
    "strings"
    "baby_duck/semantics"
    "baby_duck/token"
  )

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : PBody PTail	<<  >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PBody : PHeader Vars FunctionList main	<< func() (Attrib, error) {
        // 2. Registra 'main' como función en el directorio
        if err := semantics.RegisterFunction("main"); err != nil {
          return nil, err
        }

        // Recuperar gotoMainQuad desde PHeader (X[0])
        gotoMainQuad := X[0].(int)

        // 3. Obtener la dirección de inicio de main
        mainEntry, _ := semantics.FunctionDirectory.Get("main")
        fsMain := mainEntry.(semantics.FunctionStructure)
        startMain := fsMain.StartQuad

        // 4. Actualizar el GOTO con la dirección correcta
        semantics.Quads[gotoMainQuad].Result = startMain

        return nil, nil
      }() >>`,
		Id:         "PBody",
		NTType:     2,
		Index:      2,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // 2. Registra 'main' como función en el directorio
        if err := semantics.RegisterFunction("main"); err != nil {
          return nil, err
        }

        // Recuperar gotoMainQuad desde PHeader (X[0])
        gotoMainQuad := X[0].(int)

        // 3. Obtener la dirección de inicio de main
        mainEntry, _ := semantics.FunctionDirectory.Get("main")
        fsMain := mainEntry.(semantics.FunctionStructure)
        startMain := fsMain.StartQuad

        // 4. Actualizar el GOTO con la dirección correcta
        semantics.Quads[gotoMainQuad].Result = startMain

        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `PHeader : program id semicolon	<< semantics.HandlePHeader(X[1]) >>`,
		Id:         "PHeader",
		NTType:     3,
		Index:      3,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantics.HandlePHeader(X[1])
		},
	},
	ProdTabEntry{
		String: `PTail : Body end	<< func() (Attrib, error) {
        // 2) Generar ENDFUNC
        semantics.PushQuad("END", "_", "_", "_")

        return nil, nil
      }() >>`,
		Id:         "PTail",
		NTType:     4,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // 2) Generar ENDFUNC
        semantics.PushQuad("END", "_", "_", "_")

        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `FunctionList : Function FunctionList	<<  >>`,
		Id:         "FunctionList",
		NTType:     5,
		Index:      5,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FunctionList : "empty"	<<  >>`,
		Id:         "FunctionList",
		NTType:     5,
		Index:      6,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : VarDecl Vars	<<  >>`,
		Id:         "Vars",
		NTType:     6,
		Index:      7,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Vars : "empty"	<<  >>`,
		Id:         "Vars",
		NTType:     6,
		Index:      8,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : var IdList colon Type semicolon	<< func() (Attrib, error) {
        semantics.HandleVarDecl(X[1], X[3]) 
        return nil, nil
      }() >>`,
		Id:         "VarDecl",
		NTType:     7,
		Index:      9,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandleVarDecl(X[1], X[3]) 
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `IdList : id IdListTail	<< func() (Attrib, error) {
            if token, ok := X[0].(*token.Token); ok {
                idList := []string{string(token.Lit)}
                if X[1] != nil {
                    idList = append(idList, X[1].([]string)...)
                }
                return idList, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[0])
            }
        }() >>`,
		Id:         "IdList",
		NTType:     8,
		Index:      10,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if token, ok := X[0].(*token.Token); ok {
                idList := []string{string(token.Lit)}
                if X[1] != nil {
                    idList = append(idList, X[1].([]string)...)
                }
                return idList, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[0])
            }
        }()
		},
	},
	ProdTabEntry{
		String: `IdListTail : comma id IdListTail	<< func() (Attrib, error) {
            if token, ok := X[1].(*token.Token); ok {
                ids := []string{string(token.Lit)}
                if X[2] != nil {
                    ids = append(ids, X[2].([]string)...)
                }
                return ids, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[1])
            }
        }() >>`,
		Id:         "IdListTail",
		NTType:     9,
		Index:      11,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if token, ok := X[1].(*token.Token); ok {
                ids := []string{string(token.Lit)}
                if X[2] != nil {
                    ids = append(ids, X[2].([]string)...)
                }
                return ids, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[1])
            }
        }()
		},
	},
	ProdTabEntry{
		String: `IdListTail : "empty"	<< []string{}, nil >>`,
		Id:         "IdListTail",
		NTType:     9,
		Index:      12,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []string{}, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< X[0].(*token.Token), nil >>`,
		Id:         "Type",
		NTType:     10,
		Index:      13,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0].(*token.Token), nil
		},
	},
	ProdTabEntry{
		String: `Type : float	<< X[0].(*token.Token), nil >>`,
		Id:         "Type",
		NTType:     10,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0].(*token.Token), nil
		},
	},
	ProdTabEntry{
		String: `FunctionHeader : void id l_round_par Params r_round_par l_square_par	<< semantics.HandleFunctionHeader(X[1], X[3]) >>`,
		Id:         "FunctionHeader",
		NTType:     11,
		Index:      15,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantics.HandleFunctionHeader(X[1], X[3])
		},
	},
	ProdTabEntry{
		String: `FunctionHeaderTwo : FunctionHeader Vars	<< semantics.HandleFunctionHeaderTwo(X[0]) >>`,
		Id:         "FunctionHeaderTwo",
		NTType:     12,
		Index:      16,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return semantics.HandleFunctionHeaderTwo(X[0])
		},
	},
	ProdTabEntry{
		String: `Function : FunctionHeaderTwo Body r_square_par semicolon	<< func() (Attrib, error) {
        info := X[0].(semantics.FuncInfo) // Obtener la información de la función
        // Obtener el conteo real de temporales usados
        tempCount := semantics.TempVar

        // Actualizar la entrada de la función con el TempCount correcto
        raw, exists := semantics.FunctionDirectory.Get(info.Name)
        if !exists {
            return nil, fmt.Errorf("función '%s' no encontrada", info.Name)
        }
        fs := raw.(semantics.FunctionStructure)
        fs.TempCount = tempCount
        semantics.FunctionDirectory.Put(info.Name, fs)

        // fmt.Println("  - TempCount", info.Name, "a", tempCount)

        semantics.TempVar = 0

        // Generar ENDFUNC aquí (dentro de cada función)
        semantics.PushQuad("ENDFUNC", "_", "_", "_")

        // 2) cierro el scope local
        semantics.Scopes.ExitScope()

        return nil, nil
      }() >>`,
		Id:         "Function",
		NTType:     13,
		Index:      17,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        info := X[0].(semantics.FuncInfo) // Obtener la información de la función
        // Obtener el conteo real de temporales usados
        tempCount := semantics.TempVar

        // Actualizar la entrada de la función con el TempCount correcto
        raw, exists := semantics.FunctionDirectory.Get(info.Name)
        if !exists {
            return nil, fmt.Errorf("función '%s' no encontrada", info.Name)
        }
        fs := raw.(semantics.FunctionStructure)
        fs.TempCount = tempCount
        semantics.FunctionDirectory.Put(info.Name, fs)

        // fmt.Println("  - TempCount", info.Name, "a", tempCount)

        semantics.TempVar = 0

        // Generar ENDFUNC aquí (dentro de cada función)
        semantics.PushQuad("ENDFUNC", "_", "_", "_")

        // 2) cierro el scope local
        semantics.Scopes.ExitScope()

        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `Params : ParamList	<< func() (Attrib, error) {
          // X[0] es el slice construido en ParamList
          list, ok := X[0].([]semantics.VariableStructure)
          if !ok {
            return nil, fmt.Errorf("esperaba []VariableStructure en ParamList, pero fue %T", X[0])
          }
          return list, nil
        }() >>`,
		Id:         "Params",
		NTType:     14,
		Index:      18,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          // X[0] es el slice construido en ParamList
          list, ok := X[0].([]semantics.VariableStructure)
          if !ok {
            return nil, fmt.Errorf("esperaba []VariableStructure en ParamList, pero fue %T", X[0])
          }
          return list, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Params : "empty"	<< []semantics.VariableStructure{}, nil >>`,
		Id:         "Params",
		NTType:     14,
		Index:      19,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []semantics.VariableStructure{}, nil
		},
	},
	ProdTabEntry{
		String: `ParamList : id colon Type ParamListTail	<< func() (Attrib, error) {
        param, err := semantics.HandleParam(X[0], X[2])
        if err != nil {
            return nil, err
        }
        tail, _ := X[3].([]semantics.VariableStructure)
        return append([]semantics.VariableStructure{param}, tail...), nil
      }() >>`,
		Id:         "ParamList",
		NTType:     15,
		Index:      20,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        param, err := semantics.HandleParam(X[0], X[2])
        if err != nil {
            return nil, err
        }
        tail, _ := X[3].([]semantics.VariableStructure)
        return append([]semantics.VariableStructure{param}, tail...), nil
      }()
		},
	},
	ProdTabEntry{
		String: `ParamListTail : comma id colon Type ParamListTail	<< func() (Attrib, error) {
        param, err := semantics.HandleParam(X[1], X[3])
        if err != nil {
            return nil, err
        }
        tail, _ := X[4].([]semantics.VariableStructure)
        return append([]semantics.VariableStructure{param}, tail...), nil
      }() >>`,
		Id:         "ParamListTail",
		NTType:     16,
		Index:      21,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        param, err := semantics.HandleParam(X[1], X[3])
        if err != nil {
            return nil, err
        }
        tail, _ := X[4].([]semantics.VariableStructure)
        return append([]semantics.VariableStructure{param}, tail...), nil
      }()
		},
	},
	ProdTabEntry{
		String: `ParamListTail : "empty"	<< []semantics.VariableStructure{}, nil >>`,
		Id:         "ParamListTail",
		NTType:     16,
		Index:      22,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []semantics.VariableStructure{}, nil
		},
	},
	ProdTabEntry{
		String: `Body : l_curly_par StatementList r_curly_par	<<  >>`,
		Id:         "Body",
		NTType:     17,
		Index:      23,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement StatementList	<<  >>`,
		Id:         "StatementList",
		NTType:     18,
		Index:      24,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StatementList : "empty"	<<  >>`,
		Id:         "StatementList",
		NTType:     18,
		Index:      25,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     19,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     19,
		Index:      27,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     19,
		Index:      28,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : FCall	<<  >>`,
		Id:         "Statement",
		NTType:     19,
		Index:      29,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     19,
		Index:      30,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expression semicolon	<< func() (Attrib, error) {
        semantics.HandleAssign(X[0]) 
        return nil, nil
      }() >>`,
		Id:         "Assign",
		NTType:     20,
		Index:      31,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandleAssign(X[0]) 
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `Condition : if ConditionTail Body Else semicolon	<< func() (Attrib, error) {
      semantics.HandleCondition(X[3].(bool))
      return nil, nil
    }() >>`,
		Id:         "Condition",
		NTType:     21,
		Index:      32,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
      semantics.HandleCondition(X[3].(bool))
      return nil, nil
    }()
		},
	},
	ProdTabEntry{
		String: `ConditionTail : l_round_par Expression r_round_par	<< func() (Attrib, error) {
          semantics.HandleConditionTail() 
          return nil, nil
        }() >>`,
		Id:         "ConditionTail",
		NTType:     22,
		Index:      33,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          semantics.HandleConditionTail() 
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Else : else ElseTail Body	<< func() (Attrib, error) {
        return true, nil // para saber que hay else
      }() >>`,
		Id:         "Else",
		NTType:     23,
		Index:      34,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return true, nil // para saber que hay else
      }()
		},
	},
	ProdTabEntry{
		String: `Else : "empty"	<< func() (Attrib, error) {
        return false, nil // para saber que NO hay else
      }() >>`,
		Id:         "Else",
		NTType:     23,
		Index:      35,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return false, nil // para saber que NO hay else
      }()
		},
	},
	ProdTabEntry{
		String: `ElseTail : empty	<< func() (Attrib, error) {
        semantics.HandleElseTail()
        return nil, nil
      }() >>`,
		Id:         "ElseTail",
		NTType:     24,
		Index:      36,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandleElseTail()
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `CycleHeader : while	<< func() (Attrib, error) {
      semantics.HandleCycleHeader()
      return nil, nil
    }() >>`,
		Id:         "CycleHeader",
		NTType:     25,
		Index:      37,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
      semantics.HandleCycleHeader()
      return nil, nil
    }()
		},
	},
	ProdTabEntry{
		String: `Cycle : CycleHeader CycleExpression do Body CycleTail semicolon	<<  >>`,
		Id:         "Cycle",
		NTType:     26,
		Index:      38,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `CycleExpression : l_round_par Expression r_round_par	<< func() (Attrib, error) {
      condAddr, _ := semantics.PilaO.Pop()
      condType, _ := semantics.PTypes.Pop()

      if condType != "bool" {
        return nil, fmt.Errorf("condición en while debe ser booleana, recibió: %v", condType)
      }

      // Genera GOTOF, y guarda su índice
      semantics.PushQuad("GOTOF", condAddr, "_", -1)
      semantics.PJumps.Push(len(semantics.Quads) - 1)
      return nil, nil
    }() >>`,
		Id:         "CycleExpression",
		NTType:     27,
		Index:      39,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
      condAddr, _ := semantics.PilaO.Pop()
      condType, _ := semantics.PTypes.Pop()

      if condType != "bool" {
        return nil, fmt.Errorf("condición en while debe ser booleana, recibió: %v", condType)
      }

      // Genera GOTOF, y guarda su índice
      semantics.PushQuad("GOTOF", condAddr, "_", -1)
      semantics.PJumps.Push(len(semantics.Quads) - 1)
      return nil, nil
    }()
		},
	},
	ProdTabEntry{
		String: `CycleTail : empty	<< func() (Attrib, error) {
      semantics.HandleCycleTail()
      return nil, nil
    }() >>`,
		Id:         "CycleTail",
		NTType:     28,
		Index:      40,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
      semantics.HandleCycleTail()
      return nil, nil
    }()
		},
	},
	ProdTabEntry{
		String: `Print : print l_round_par PrintList r_round_par semicolon	<<  >>`,
		Id:         "Print",
		NTType:     29,
		Index:      41,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintList : Expression PrintListTail	<< func() (Attrib, error) {
        semantics.HandlePrintExpression()
        return nil, nil
      }() >>`,
		Id:         "PrintList",
		NTType:     30,
		Index:      42,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandlePrintExpression()
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `PrintList : cte_string PrintListTail	<< func() (Attrib, error) {
        semantics.HandlePrintString(X[0])
        return nil, nil
      }() >>`,
		Id:         "PrintList",
		NTType:     30,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandlePrintString(X[0])
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `PrintListTail : comma Expression PrintListTail	<< func() (Attrib, error) {
        semantics.HandlePrintExpression()
        return nil, nil
      }() >>`,
		Id:         "PrintListTail",
		NTType:     31,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandlePrintExpression()
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `PrintListTail : comma cte_string PrintListTail	<< func() (Attrib, error) {
        semantics.HandlePrintString(X[1])
        return nil, nil
      }() >>`,
		Id:         "PrintListTail",
		NTType:     31,
		Index:      45,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.HandlePrintString(X[1])
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `PrintListTail : "empty"	<< nil, nil >>`,
		Id:         "PrintListTail",
		NTType:     31,
		Index:      46,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Expression : Exp Operator Exp	<< func() (Attrib, error) {
          err := semantics.DoRelational()
          if err != nil {
            return nil, err
          }
          return nil, nil
        }() >>`,
		Id:         "Expression",
		NTType:     32,
		Index:      47,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          err := semantics.DoRelational()
          if err != nil {
            return nil, err
          }
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Expression : Exp	<< func() (Attrib, error) {
        return X[0], nil
      }() >>`,
		Id:         "Expression",
		NTType:     32,
		Index:      48,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        return X[0], nil
      }()
		},
	},
	ProdTabEntry{
		String: `Operator : less_than	<< func() (Attrib, error) {
          semantics.PushOp(">")
          return nil, nil
        }() >>`,
		Id:         "Operator",
		NTType:     33,
		Index:      49,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          semantics.PushOp(">")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Operator : more_than	<< func() (Attrib, error) {
          semantics.PushOp("<")
          return nil, nil
        }() >>`,
		Id:         "Operator",
		NTType:     33,
		Index:      50,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          semantics.PushOp("<")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Operator : not_equal	<< func() (Attrib, error) {
          semantics.PushOp("!=")
          return nil, nil
        }() >>`,
		Id:         "Operator",
		NTType:     33,
		Index:      51,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          semantics.PushOp("!=")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Exp : Term ExpList	<<  >>`,
		Id:         "Exp",
		NTType:     34,
		Index:      52,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpList : OperatorAdd Term ExpList	<< func() (Attrib, error) {
          _ = semantics.DoAddSub()
          return nil, nil
        }() >>`,
		Id:         "ExpList",
		NTType:     35,
		Index:      53,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          _ = semantics.DoAddSub()
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `ExpList : "empty"	<< func() (Attrib, error) {
          _ = semantics.DoAddSub()
          return nil, nil
        }() >>`,
		Id:         "ExpList",
		NTType:     35,
		Index:      54,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          _ = semantics.DoAddSub()
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `OperatorAdd : add	<< func() (Attrib, error) {
          semantics.DoAddSub()
          semantics.PushOp("+")
          return nil, nil
        }() >>`,
		Id:         "OperatorAdd",
		NTType:     36,
		Index:      55,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          semantics.DoAddSub()
          semantics.PushOp("+")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `OperatorAdd : rest	<< func() (Attrib, error) {
          semantics.DoAddSub()
          semantics.PushOp("-")
          return nil, nil
        }() >>`,
		Id:         "OperatorAdd",
		NTType:     36,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          semantics.DoAddSub()
          semantics.PushOp("-")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Term : Factor TermList	<<  >>`,
		Id:         "Term",
		NTType:     37,
		Index:      57,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TermList : OperatorMul Factor TermList	<< func() (Attrib, error) {
          _ = semantics.DoMulDiv()
          return nil, nil
        }() >>`,
		Id:         "TermList",
		NTType:     38,
		Index:      58,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          _ = semantics.DoMulDiv()
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `TermList : "empty"	<< func() (Attrib, error) {
          _ = semantics.DoMulDiv()
          return nil, nil
        }() >>`,
		Id:         "TermList",
		NTType:     38,
		Index:      59,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          _ = semantics.DoMulDiv()
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `OperatorMul : multiply	<< func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorMul → *")
          semantics.DoMulDiv()
          semantics.PushOp("*")
          return nil, nil
        }() >>`,
		Id:         "OperatorMul",
		NTType:     39,
		Index:      60,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorMul → *")
          semantics.DoMulDiv()
          semantics.PushOp("*")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `OperatorMul : divide	<< func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorMul → /")
          semantics.DoMulDiv()
          semantics.PushOp("/")
          return nil, nil
        }() >>`,
		Id:         "OperatorMul",
		NTType:     39,
		Index:      61,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorMul → /")
          semantics.DoMulDiv()
          semantics.PushOp("/")
          return nil, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Factor : FakeBottom Expression CloseParen	<<  >>`,
		Id:         "Factor",
		NTType:     40,
		Index:      62,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Cte	<< func() (Attrib, error) {
        cteToken := X[0].(*token.Token)
        value := string(cteToken.Lit)
        tipo := "int"
        if strings.Contains(value, ".") {
          tipo = "float"
        }
        semantics.PushOperandDebug(value, tipo)

        return cteToken, nil
      }() >>`,
		Id:         "Factor",
		NTType:     40,
		Index:      63,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        cteToken := X[0].(*token.Token)
        value := string(cteToken.Lit)
        tipo := "int"
        if strings.Contains(value, ".") {
          tipo = "float"
        }
        semantics.PushOperandDebug(value, tipo)

        return cteToken, nil
      }()
		},
	},
	ProdTabEntry{
		String: `Factor : id	<< func() (Attrib, error) {
        name := string(X[0].(*token.Token).Lit)
        //fmt.Printf("→ DEBUG Factor: intentando usar variable '%s'\n", name)

        raw, exists := semantics.Scopes.Current().Get(name)
        if !exists {
          return nil, fmt.Errorf("error: variable '%s' no declarada", name)
        }

        vs := raw.(semantics.VariableStructure)
        semantics.PushOperandDebug(vs.Address, vs.Type)

        // devolvemos el token para que la propia producción lo use en la AST
        return X[0], nil
      }() >>`,
		Id:         "Factor",
		NTType:     40,
		Index:      64,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        name := string(X[0].(*token.Token).Lit)
        //fmt.Printf("→ DEBUG Factor: intentando usar variable '%s'\n", name)

        raw, exists := semantics.Scopes.Current().Get(name)
        if !exists {
          return nil, fmt.Errorf("error: variable '%s' no declarada", name)
        }

        vs := raw.(semantics.VariableStructure)
        semantics.PushOperandDebug(vs.Address, vs.Type)

        // devolvemos el token para que la propia producción lo use en la AST
        return X[0], nil
      }()
		},
	},
	ProdTabEntry{
		String: `Factor : add Factor	<<  >>`,
		Id:         "Factor",
		NTType:     40,
		Index:      65,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : rest Factor	<<  >>`,
		Id:         "Factor",
		NTType:     40,
		Index:      66,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FakeBottom : l_round_par	<< func() (Attrib, error) {
        semantics.PushOp("⏊")
        //fmt.Println("→ PUSH OPERADOR: ⏊ (fondo falso)")
        return nil, nil
      }() >>`,
		Id:         "FakeBottom",
		NTType:     41,
		Index:      67,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        semantics.PushOp("⏊")
        //fmt.Println("→ PUSH OPERADOR: ⏊ (fondo falso)")
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `CloseParen : r_round_par	<< func() (Attrib, error) {
        err := semantics.PopUntilFakeBottom()
        return nil, err
      }() >>`,
		Id:         "CloseParen",
		NTType:     42,
		Index:      68,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        err := semantics.PopUntilFakeBottom()
        return nil, err
      }()
		},
	},
	ProdTabEntry{
		String: `Cte : cte_int	<<  >>`,
		Id:         "Cte",
		NTType:     43,
		Index:      69,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_float	<<  >>`,
		Id:         "Cte",
		NTType:     43,
		Index:      70,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FEra : id	<< func() (Attrib, error) {
        // 1) Extraer nombre de la función
        fnTok, ok := X[0].(*token.Token)
        if !ok {
          return nil, fmt.Errorf("esperaba identificador de función, pero fue %T", X[0])
        }
        name := string(fnTok.Lit)

        // 3) Comprobar que la función exista
        _, exists := semantics.FunctionDirectory.Get(name)
        if !exists {
          return nil, fmt.Errorf("error: función '%s' no declarada", name)
        }

        // Tamaño = variables locales + temporales + parámetros
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)
        size := fs.LocalVarCount + fs.TempCount + fs.ParamCount
        semantics.PushQuad("ERA", "_", "_", size)

        return X[0], nil
      }() >>`,
		Id:         "FEra",
		NTType:     44,
		Index:      71,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // 1) Extraer nombre de la función
        fnTok, ok := X[0].(*token.Token)
        if !ok {
          return nil, fmt.Errorf("esperaba identificador de función, pero fue %T", X[0])
        }
        name := string(fnTok.Lit)

        // 3) Comprobar que la función exista
        _, exists := semantics.FunctionDirectory.Get(name)
        if !exists {
          return nil, fmt.Errorf("error: función '%s' no declarada", name)
        }

        // Tamaño = variables locales + temporales + parámetros
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)
        size := fs.LocalVarCount + fs.TempCount + fs.ParamCount
        semantics.PushQuad("ERA", "_", "_", size)

        return X[0], nil
      }()
		},
	},
	ProdTabEntry{
		String: `FCall : FEra l_round_par FCallList r_round_par semicolon	<< func() (Attrib, error) {
        fnTok := X[0].(*token.Token)
        name := string(fnTok.Lit)
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)

        n := len(fs.Parameters)
        args, _ := X[2].([]Attrib)
        
        // 1. Verificar aridad usando las pilas
        if len(args) != n {
            return nil, fmt.Errorf(
                "error: función '%s' espera %d argumentos, recibió %d",
                name, n, len(args),
            )
        }

        // Sacar argumentos de las pilas (en orden inverso)
        for i := n - 1; i >= 0; i-- {
            addr, _ := semantics.PilaO.Pop()
            tipoRaw, _ := semantics.PTypes.Pop()
            tipo, _ := tipoRaw.(string)
            
            // Verificar tipo
            expectedType := fs.Parameters[i].Type
            if tipo != expectedType {
                return nil, fmt.Errorf(
                    "error: parámetro %d tipo incorrecto, esperaba %s, obtuvo %s",
                    n-i, expectedType, tipo,
                )
            }
            
            // Generar PARAMETER con índice (i+1)
            semantics.PushQuad("PARAMETER", addr, "_", i+1)

            fmt.Println(addr, i+1)
        }

        // 4. Generar GOSUB
        semantics.PushQuad("GOSUB", name, "_", fs.StartQuad)

        return X[0], nil
      }() >>`,
		Id:         "FCall",
		NTType:     45,
		Index:      72,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        fnTok := X[0].(*token.Token)
        name := string(fnTok.Lit)
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)

        n := len(fs.Parameters)
        args, _ := X[2].([]Attrib)
        
        // 1. Verificar aridad usando las pilas
        if len(args) != n {
            return nil, fmt.Errorf(
                "error: función '%s' espera %d argumentos, recibió %d",
                name, n, len(args),
            )
        }

        // Sacar argumentos de las pilas (en orden inverso)
        for i := n - 1; i >= 0; i-- {
            addr, _ := semantics.PilaO.Pop()
            tipoRaw, _ := semantics.PTypes.Pop()
            tipo, _ := tipoRaw.(string)
            
            // Verificar tipo
            expectedType := fs.Parameters[i].Type
            if tipo != expectedType {
                return nil, fmt.Errorf(
                    "error: parámetro %d tipo incorrecto, esperaba %s, obtuvo %s",
                    n-i, expectedType, tipo,
                )
            }
            
            // Generar PARAMETER con índice (i+1)
            semantics.PushQuad("PARAMETER", addr, "_", i+1)

            fmt.Println(addr, i+1)
        }

        // 4. Generar GOSUB
        semantics.PushQuad("GOSUB", name, "_", fs.StartQuad)

        return X[0], nil
      }()
		},
	},
	ProdTabEntry{
		String: `FCallList : Expression FCallListTail	<< func() (Attrib, error) {
          first := X[0].(Attrib)
          tail, _ := X[1].([]Attrib)
          return append([]Attrib{first}, tail...), nil
        }() >>`,
		Id:         "FCallList",
		NTType:     46,
		Index:      73,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          first := X[0].(Attrib)
          tail, _ := X[1].([]Attrib)
          return append([]Attrib{first}, tail...), nil
        }()
		},
	},
	ProdTabEntry{
		String: `FCallList : "empty"	<< []Attrib{}, nil >>`,
		Id:         "FCallList",
		NTType:     46,
		Index:      74,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []Attrib{}, nil
		},
	},
	ProdTabEntry{
		String: `FCallListTail : comma Expression FCallListTail	<< func() (Attrib, error) {
          //fmt.Printf("→ DEBUG FCallListTail: X[1]=%T (%v), X[2]=%T (%v)\n", X[1], X[1], X[2], X[2])
          if X[1] == nil {
            return nil, fmt.Errorf("FCallListTail error: argumento nulo en expresión")
          }

          arg := X[1].(Attrib)

          var more []Attrib
          if X[2] != nil {
            more = X[2].([]Attrib)
          } else {
            more = []Attrib{}
          }

          return append([]Attrib{arg}, more...), nil
        }() >>`,
		Id:         "FCallListTail",
		NTType:     47,
		Index:      75,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          //fmt.Printf("→ DEBUG FCallListTail: X[1]=%T (%v), X[2]=%T (%v)\n", X[1], X[1], X[2], X[2])
          if X[1] == nil {
            return nil, fmt.Errorf("FCallListTail error: argumento nulo en expresión")
          }

          arg := X[1].(Attrib)

          var more []Attrib
          if X[2] != nil {
            more = X[2].([]Attrib)
          } else {
            more = []Attrib{}
          }

          return append([]Attrib{arg}, more...), nil
        }()
		},
	},
	ProdTabEntry{
		String: `FCallListTail : "empty"	<< []Attrib{}, nil >>`,
		Id:         "FCallListTail",
		NTType:     47,
		Index:      76,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []Attrib{}, nil
		},
	},
}

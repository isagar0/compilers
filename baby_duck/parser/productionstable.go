// Code generated by gocc; DO NOT EDIT.

package parser

import (
    "fmt"
    "baby_duck/semantics"
    "baby_duck/token"
  )
  
  // Helper para pasar nombre+params
  type FuncInfo struct {
    Name   string
    Params []semantics.VariableStructure
  }

type (
	ProdTab      [numProductions]ProdTabEntry
	ProdTabEntry struct {
		String     string
		Id         string
		NTType     int
		Index      int
		NumSymbols int
		ReduceFunc func([]Attrib, interface{}) (Attrib, error)
	}
	Attrib interface {
	}
)

var productionsTable = ProdTab{
	ProdTabEntry{
		String: `S' : Program	<<  >>`,
		Id:         "S'",
		NTType:     0,
		Index:      0,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Program : program id semicolon Vars FunctionList main Body end	<< func() (Attrib, error) {
        // 2) registro el main antes de Vars
        token := X[1].(*token.Token)
        name := string(token.Lit)
        if err := semantics.RegisterMainProgram(name); err != nil {
          return nil, err
        }
        return nil, nil
      }() >>`,
		Id:         "Program",
		NTType:     1,
		Index:      1,
		NumSymbols: 8,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // 2) registro el main antes de Vars
        token := X[1].(*token.Token)
        name := string(token.Lit)
        if err := semantics.RegisterMainProgram(name); err != nil {
          return nil, err
        }
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `FunctionList : Function FunctionList	<<  >>`,
		Id:         "FunctionList",
		NTType:     2,
		Index:      2,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FunctionList : "empty"	<<  >>`,
		Id:         "FunctionList",
		NTType:     2,
		Index:      3,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Vars : VarDecl Vars	<<  >>`,
		Id:         "Vars",
		NTType:     3,
		Index:      4,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Vars : "empty"	<<  >>`,
		Id:         "Vars",
		NTType:     3,
		Index:      5,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `VarDecl : var IdList colon Type semicolon	<< func() (Attrib, error) {
            // Obtener los identificadores de IdList (debe ser []string)
            if ids, ok := X[1].([]string); ok {
                // Obtener el tipo de las variables
                if tipoToken, ok := X[3].(*token.Token); ok {
                    tipo := string(tipoToken.Lit)

                    // Declarar las variables en la tabla global
                    if err := semantics.VarDeclaration(ids, tipo); err != nil {
                        return nil, err
                    }

                    return nil, nil // Si todo está bien, se devuelve nil
                } else {
                    return nil, fmt.Errorf("se esperaba un token para el tipo, pero se encontró: %T", X[3])
                }
            } else {
                return nil, fmt.Errorf("se esperaba un []string para los identificadores, pero se encontró: %T", X[1])
            }
        }() >>`,
		Id:         "VarDecl",
		NTType:     4,
		Index:      6,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            // Obtener los identificadores de IdList (debe ser []string)
            if ids, ok := X[1].([]string); ok {
                // Obtener el tipo de las variables
                if tipoToken, ok := X[3].(*token.Token); ok {
                    tipo := string(tipoToken.Lit)

                    // Declarar las variables en la tabla global
                    if err := semantics.VarDeclaration(ids, tipo); err != nil {
                        return nil, err
                    }

                    return nil, nil // Si todo está bien, se devuelve nil
                } else {
                    return nil, fmt.Errorf("se esperaba un token para el tipo, pero se encontró: %T", X[3])
                }
            } else {
                return nil, fmt.Errorf("se esperaba un []string para los identificadores, pero se encontró: %T", X[1])
            }
        }()
		},
	},
	ProdTabEntry{
		String: `IdList : id IdListTail	<< func() (Attrib, error) {
            if token, ok := X[0].(*token.Token); ok {
                idList := []string{string(token.Lit)}
                if X[1] != nil {
                    idList = append(idList, X[1].([]string)...)
                }
                return idList, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[0])
            }
        }() >>`,
		Id:         "IdList",
		NTType:     5,
		Index:      7,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if token, ok := X[0].(*token.Token); ok {
                idList := []string{string(token.Lit)}
                if X[1] != nil {
                    idList = append(idList, X[1].([]string)...)
                }
                return idList, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[0])
            }
        }()
		},
	},
	ProdTabEntry{
		String: `IdListTail : comma id IdListTail	<< func() (Attrib, error) {
            if token, ok := X[1].(*token.Token); ok {
                ids := []string{string(token.Lit)}
                if X[2] != nil {
                    ids = append(ids, X[2].([]string)...)
                }
                return ids, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[1])
            }
        }() >>`,
		Id:         "IdListTail",
		NTType:     6,
		Index:      8,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
            if token, ok := X[1].(*token.Token); ok {
                ids := []string{string(token.Lit)}
                if X[2] != nil {
                    ids = append(ids, X[2].([]string)...)
                }
                return ids, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", X[1])
            }
        }()
		},
	},
	ProdTabEntry{
		String: `IdListTail : "empty"	<< []string{}, nil >>`,
		Id:         "IdListTail",
		NTType:     6,
		Index:      9,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []string{}, nil
		},
	},
	ProdTabEntry{
		String: `Type : int	<< X[0].(*token.Token), nil >>`,
		Id:         "Type",
		NTType:     7,
		Index:      10,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0].(*token.Token), nil
		},
	},
	ProdTabEntry{
		String: `Type : float	<< X[0].(*token.Token), nil >>`,
		Id:         "Type",
		NTType:     7,
		Index:      11,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0].(*token.Token), nil
		},
	},
	ProdTabEntry{
		String: `FunctionHeader : void id l_round_par Params r_round_par l_square_par	<< func() (Attrib, error) {
        // X[1] = id, X[3] = Params
        name   := string(X[1].(*token.Token).Lit)
        params := X[3].([]semantics.VariableStructure)

        // 1) registro preliminar (void, sin vars aún)
        if err := semantics.RegisterFunction(name); err != nil {
          return nil, err
        }
        // 2) abro el scope local
        semantics.EnterScope()
        // 3) declaro los parámetros en ese scope
        for _, p := range params {
          if err := semantics.VarDeclaration([]string{p.Name}, p.Type); err != nil {
            semantics.ExitScope()
            return nil, err
          }
        }
        // devolvemos la info para la segunda parte
        return FuncInfo{Name: name, Params: params}, nil
      }() >>`,
		Id:         "FunctionHeader",
		NTType:     8,
		Index:      12,
		NumSymbols: 6,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // X[1] = id, X[3] = Params
        name   := string(X[1].(*token.Token).Lit)
        params := X[3].([]semantics.VariableStructure)

        // 1) registro preliminar (void, sin vars aún)
        if err := semantics.RegisterFunction(name); err != nil {
          return nil, err
        }
        // 2) abro el scope local
        semantics.EnterScope()
        // 3) declaro los parámetros en ese scope
        for _, p := range params {
          if err := semantics.VarDeclaration([]string{p.Name}, p.Type); err != nil {
            semantics.ExitScope()
            return nil, err
          }
        }
        // devolvemos la info para la segunda parte
        return FuncInfo{Name: name, Params: params}, nil
      }()
		},
	},
	ProdTabEntry{
		String: `Function : FunctionHeader Vars Body r_square_par semicolon	<< func() (Attrib, error) {
        // recupero lo que devolvió FunctionHeader
        info := X[0].(FuncInfo)

        // 1) actualizo la entrada con params y VarTable local
        if err := semantics.FuncDeclaration(info.Name, info.Params); err != nil {
          semantics.ExitScope()
          return nil, err
        }
        // 2) cierro el scope local
        semantics.ExitScope()
        return nil, nil
      }() >>`,
		Id:         "Function",
		NTType:     9,
		Index:      13,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // recupero lo que devolvió FunctionHeader
        info := X[0].(FuncInfo)

        // 1) actualizo la entrada con params y VarTable local
        if err := semantics.FuncDeclaration(info.Name, info.Params); err != nil {
          semantics.ExitScope()
          return nil, err
        }
        // 2) cierro el scope local
        semantics.ExitScope()
        return nil, nil
      }()
		},
	},
	ProdTabEntry{
		String: `Params : ParamList	<< func() (Attrib, error) {
          // X[0] es el slice construido en ParamList
          list, ok := X[0].([]semantics.VariableStructure)
          if !ok {
            return nil, fmt.Errorf("esperaba []VariableStructure en ParamList, pero fue %T", X[0])
          }
          return list, nil
        }() >>`,
		Id:         "Params",
		NTType:     10,
		Index:      14,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
          // X[0] es el slice construido en ParamList
          list, ok := X[0].([]semantics.VariableStructure)
          if !ok {
            return nil, fmt.Errorf("esperaba []VariableStructure en ParamList, pero fue %T", X[0])
          }
          return list, nil
        }()
		},
	},
	ProdTabEntry{
		String: `Params : "empty"	<< []semantics.VariableStructure{}, nil >>`,
		Id:         "Params",
		NTType:     10,
		Index:      15,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []semantics.VariableStructure{}, nil
		},
	},
	ProdTabEntry{
		String: `ParamList : id colon Type ParamListTail	<< func() (Attrib, error) {
        // X[0]=id, X[2]=Type, X[3]=la cola
        nameTok := X[0].(*token.Token)
        tipoTok := X[2].(*token.Token)
        list := []semantics.VariableStructure{
          {Name: string(nameTok.Lit), Type: string(tipoTok.Lit)},
        }
        if tail, ok := X[3].([]semantics.VariableStructure); ok {
          list = append(list, tail...)
        }
        return list, nil
      }() >>`,
		Id:         "ParamList",
		NTType:     11,
		Index:      16,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // X[0]=id, X[2]=Type, X[3]=la cola
        nameTok := X[0].(*token.Token)
        tipoTok := X[2].(*token.Token)
        list := []semantics.VariableStructure{
          {Name: string(nameTok.Lit), Type: string(tipoTok.Lit)},
        }
        if tail, ok := X[3].([]semantics.VariableStructure); ok {
          list = append(list, tail...)
        }
        return list, nil
      }()
		},
	},
	ProdTabEntry{
		String: `ParamListTail : comma id colon Type ParamListTail	<< func() (Attrib, error) {
        // X[1]=id, X[3]=Type, X[4]=ParamListTail
        nameTok := X[1].(*token.Token)
        tipoTok := X[3].(*token.Token)
        list := []semantics.VariableStructure{
          {Name: string(nameTok.Lit), Type: string(tipoTok.Lit)},
        }
        if more, ok := X[4].([]semantics.VariableStructure); ok {
          list = append(list, more...)
        }
        return list, nil
      }() >>`,
		Id:         "ParamListTail",
		NTType:     12,
		Index:      17,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return func() (Attrib, error) {
        // X[1]=id, X[3]=Type, X[4]=ParamListTail
        nameTok := X[1].(*token.Token)
        tipoTok := X[3].(*token.Token)
        list := []semantics.VariableStructure{
          {Name: string(nameTok.Lit), Type: string(tipoTok.Lit)},
        }
        if more, ok := X[4].([]semantics.VariableStructure); ok {
          list = append(list, more...)
        }
        return list, nil
      }()
		},
	},
	ProdTabEntry{
		String: `ParamListTail : "empty"	<< []semantics.VariableStructure{}, nil >>`,
		Id:         "ParamListTail",
		NTType:     12,
		Index:      18,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return []semantics.VariableStructure{}, nil
		},
	},
	ProdTabEntry{
		String: `Body : l_curly_par StatementList r_curly_par	<<  >>`,
		Id:         "Body",
		NTType:     13,
		Index:      19,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StatementList : Statement StatementList	<<  >>`,
		Id:         "StatementList",
		NTType:     14,
		Index:      20,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `StatementList : "empty"	<<  >>`,
		Id:         "StatementList",
		NTType:     14,
		Index:      21,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Statement : Assign	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      22,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Condition	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      23,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Cycle	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      24,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : FCall	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      25,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Statement : Print	<<  >>`,
		Id:         "Statement",
		NTType:     15,
		Index:      26,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Assign : id assign Expression semicolon	<<  >>`,
		Id:         "Assign",
		NTType:     16,
		Index:      27,
		NumSymbols: 4,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Condition : if l_round_par Expression r_round_par Body Else semicolon	<<  >>`,
		Id:         "Condition",
		NTType:     17,
		Index:      28,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Else : else Body	<<  >>`,
		Id:         "Else",
		NTType:     18,
		Index:      29,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Else : "empty"	<<  >>`,
		Id:         "Else",
		NTType:     18,
		Index:      30,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Cycle : while l_round_par Expression r_round_par do Body semicolon	<<  >>`,
		Id:         "Cycle",
		NTType:     19,
		Index:      31,
		NumSymbols: 7,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Print : print l_round_par PrintList r_round_par semicolon	<<  >>`,
		Id:         "Print",
		NTType:     20,
		Index:      32,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintList : Expression PrintListTail	<<  >>`,
		Id:         "PrintList",
		NTType:     21,
		Index:      33,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintList : cte_string PrintListTail	<<  >>`,
		Id:         "PrintList",
		NTType:     21,
		Index:      34,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintListTail : comma Expression PrintListTail	<<  >>`,
		Id:         "PrintListTail",
		NTType:     22,
		Index:      35,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintListTail : comma cte_string PrintListTail	<<  >>`,
		Id:         "PrintListTail",
		NTType:     22,
		Index:      36,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `PrintListTail : "empty"	<<  >>`,
		Id:         "PrintListTail",
		NTType:     22,
		Index:      37,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Expression : Exp Operator Exp	<<  >>`,
		Id:         "Expression",
		NTType:     23,
		Index:      38,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Expression : Exp	<<  >>`,
		Id:         "Expression",
		NTType:     23,
		Index:      39,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operator : less_than	<<  >>`,
		Id:         "Operator",
		NTType:     24,
		Index:      40,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operator : more_than	<<  >>`,
		Id:         "Operator",
		NTType:     24,
		Index:      41,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Operator : not_equal	<<  >>`,
		Id:         "Operator",
		NTType:     24,
		Index:      42,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Exp : Term ExpList	<<  >>`,
		Id:         "Exp",
		NTType:     25,
		Index:      43,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpList : add Term ExpList	<<  >>`,
		Id:         "ExpList",
		NTType:     26,
		Index:      44,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpList : rest Term ExpList	<<  >>`,
		Id:         "ExpList",
		NTType:     26,
		Index:      45,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `ExpList : "empty"	<<  >>`,
		Id:         "ExpList",
		NTType:     26,
		Index:      46,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Term : Factor TermList	<<  >>`,
		Id:         "Term",
		NTType:     27,
		Index:      47,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TermList : multiply Factor TermList	<<  >>`,
		Id:         "TermList",
		NTType:     28,
		Index:      48,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TermList : divide Factor TermList	<<  >>`,
		Id:         "TermList",
		NTType:     28,
		Index:      49,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `TermList : "empty"	<<  >>`,
		Id:         "TermList",
		NTType:     28,
		Index:      50,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `Factor : l_round_par Expression r_round_par	<<  >>`,
		Id:         "Factor",
		NTType:     29,
		Index:      51,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : Cte	<<  >>`,
		Id:         "Factor",
		NTType:     29,
		Index:      52,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : id	<<  >>`,
		Id:         "Factor",
		NTType:     29,
		Index:      53,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : add Factor	<<  >>`,
		Id:         "Factor",
		NTType:     29,
		Index:      54,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Factor : rest Factor	<<  >>`,
		Id:         "Factor",
		NTType:     29,
		Index:      55,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_int	<<  >>`,
		Id:         "Cte",
		NTType:     30,
		Index:      56,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `Cte : cte_float	<<  >>`,
		Id:         "Cte",
		NTType:     30,
		Index:      57,
		NumSymbols: 1,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCall : id l_round_par FCallList r_round_par semicolon	<<  >>`,
		Id:         "FCall",
		NTType:     31,
		Index:      58,
		NumSymbols: 5,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCallList : Expression FCallListTail	<<  >>`,
		Id:         "FCallList",
		NTType:     32,
		Index:      59,
		NumSymbols: 2,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCallList : "empty"	<<  >>`,
		Id:         "FCallList",
		NTType:     32,
		Index:      60,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
	ProdTabEntry{
		String: `FCallListTail : comma Expression FCallListTail	<<  >>`,
		Id:         "FCallListTail",
		NTType:     33,
		Index:      61,
		NumSymbols: 3,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return X[0], nil
		},
	},
	ProdTabEntry{
		String: `FCallListTail : "empty"	<<  >>`,
		Id:         "FCallListTail",
		NTType:     33,
		Index:      62,
		NumSymbols: 0,
		ReduceFunc: func(X []Attrib, C interface{}) (Attrib, error) {
			return nil, nil
		},
	},
}

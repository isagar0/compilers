/*-------------------------- Scanner(Lexical) -------------------------- */

/* Palabras Clave */
program      : 'p''r''o''g''r''a''m' ;
main         : 'm''a''i''n' ;
end          : 'e''n''d' ;
var          : 'v''a''r' ;
int          : 'i''n''t' ;
float        : 'f''l''o''a''t' ;
print        : 'p''r''i''n''t' ;
while        : 'w''h''i''l''e' ;
do           : 'd''o' ;
if           : 'i''f' ;
else         : 'e''l''s''e' ;
void         : 'v''o''i''d' ;

/* ID */
_lowcase     : 'a'-'z' ;
_upcase      : 'A'-'Z' ;
_digit       : '0'-'9' ;
id           : (_lowcase | _upcase) { (_lowcase | _upcase | _digit | '_') } ;

/* Constantes */
_special : ' ' | '!' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
           ':' | ';' | '<' | '=' | '>' | '?' | '@' |
           '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~' ;
_chars       : _lowcase | _upcase | _special | _digit ;
cte_int      : _digit { _digit } ;
cte_float    : _digit { _digit } '.' _digit { _digit } ;
cte_string   : '"' {_chars} '"' ;

/* Operadores */
assign       : '=' ;
not_equal    : '!''=' ;
less_than    : '>' ;
more_than    : '<' ;
add          : '+' ;
rest         : '-' ;
multiply     : '*' ;
divide       : '/' ;

/* Simbolos especiales */
semicolon    : ';' ;
colon        : ':' ;
comma        : ',' ;
l_round_par  : '(' ;
r_round_par  : ')' ;
l_curly_par  : '{' ;
r_curly_par  : '}' ;
l_square_par : '[' ;
r_square_par : ']' ;

/* Ignorar */
!whitespace  : ' ' | '\t' | '\n' | '\r' ;

/* -------------------------- Parser (Syntax) -------------------------- */
<<
  import (
    "fmt"
    "strings"
    "baby_duck/semantics"
    "baby_duck/token"
  )
  
  // Helper para pasar nombre+params
  type FuncInfo struct {
    Name   string
    Params []semantics.VariableStructure
  }
>>

/* PROGRAM */
Program
  : PBody PTail
  ;

PBody
  : PHeader Vars FunctionList main
    <<
      func() (Attrib, error) {
        // 2. Registra 'main' como función en el directorio
        if err := semantics.RegisterFunction("main"); err != nil {
          return nil, err
        }

        // Recuperar gotoMainQuad desde PHeader ($0)
        gotoMainQuad := $0.(int)

        // 3. Obtener la dirección de inicio de main
        mainEntry, _ := semantics.FunctionDirectory.Get("main")
        fsMain := mainEntry.(semantics.FunctionStructure)
        startMain := fsMain.StartQuad

        // 4. Actualizar el GOTO con la dirección correcta
        semantics.Quads[gotoMainQuad].Result = startMain

        return nil, nil
      }()
    >>
  ;

PHeader
  : program id semicolon
  <<
    func() (Attrib, error) {
      token := $1.(*token.Token)
      name := string(token.Lit)
      if err := semantics.RegisterMainProgram(name); err != nil {
        return nil, err
      }

      // 1. Generar GOTO main (target temporal -1)
        semantics.PushQuad("GOTO MAIN", "_", "_", -1)
        gotoMainQuad := len(semantics.Quads) - 1

      return gotoMainQuad, nil
      }()
  >>
  ;

PTail
  : Body end
  <<
      func() (Attrib, error) {
        // 2) Generar ENDFUNC
        semantics.PushQuad("END", "_", "_", "_")

        return nil, nil
      }()
    >>
  ;

FunctionList
    : Function FunctionList
    | "empty"
    ;

/* VARS */
Vars
    : VarDecl Vars
    | "empty"
    ;

VarDecl
    : var IdList colon Type semicolon
    <<
        func() (Attrib, error) {
            // Obtener los identificadores de IdList (debe ser []string)
            if ids, ok := $1.([]string); ok {
                // Obtener el tipo de las variables
                if tipoToken, ok := $3.(*token.Token); ok {
                    tipo := string(tipoToken.Lit)

                    // Declarar las variables en la tabla global
                    if err := semantics.VarDeclaration(ids, tipo); err != nil {
                        return nil, err
                    }

                    return nil, nil // Si todo está bien, se devuelve nil
                } else {
                    return nil, fmt.Errorf("se esperaba un token para el tipo, pero se encontró: %T", $3)
                }
            } else {
                return nil, fmt.Errorf("se esperaba un []string para los identificadores, pero se encontró: %T", $1)
            }
        }()
    >>
    ;

IdList
    : id IdListTail
    <<
        func() (Attrib, error) {
            if token, ok := $0.(*token.Token); ok {
                idList := []string{string(token.Lit)}
                if $1 != nil {
                    idList = append(idList, $1.([]string)...)
                }
                return idList, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", $0)
            }
        }()
    >>
    ;

IdListTail
    : comma id IdListTail
    <<
        func() (Attrib, error) {
            if token, ok := $1.(*token.Token); ok {
                ids := []string{string(token.Lit)}
                if $2 != nil {
                    ids = append(ids, $2.([]string)...)
                }
                return ids, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", $1)
            }
        }()
    >>
    | "empty"
    << []string{}, nil >>
    ;

/* TYPE */
Type
    : int
    << $0.(*token.Token), nil >>
    | float
    << $0.(*token.Token), nil >>
    ;

/* FUNCS */
/* CABECERA de función: registra el nombre, abre el scope, declara parámetros */
FunctionHeader
  : void id l_round_par Params r_round_par l_square_par
    <<
      func() (Attrib, error) {
        // X[1] = id, X[3] = Params
        name   := string(X[1].(*token.Token).Lit)
        params := $3.([]semantics.VariableStructure)

        // 1) registro preliminar (void, sin vars aún)
        if err := semantics.RegisterFunction(name); err != nil {
          return nil, err
        }
        // 2) abro el scope local
        semantics.Scopes.EnterScope()
        // 3) declaro los parámetros en ese scope
        for _, p := range params {
          if err := semantics.VarDeclaration([]string{p.Name}, p.Type); err != nil {
            semantics.Scopes.ExitScope()
            return nil, err
          }
        }
        // devolvemos la info para la segunda parte
        return FuncInfo{Name: name, Params: params}, nil
      }()
    >>
  ;

/* CUERPO de función: consume vars locales, cierra el scope y completa el registro */
FunctionHeaderTwo
  : FunctionHeader Vars
  <<
      func() (Attrib, error) {
        // recupero lo que devolvió FunctionHeader
        info := X[0].(FuncInfo)
        localVarCount := semantics.Scopes.Current().CountVars() - len(info.Params)
        startQuad := semantics.GetCurrentQuad()+1
        
        fmt.Println("\n[DEBUG] Registrando función:", info.Name)
        fmt.Println("  - Parámetros declarados:", len(info.Params))
        fmt.Println("  - Variables locales contadas:", localVarCount)
        fmt.Println("  - Cuadruplo inicial:", startQuad)

        // 1) actualizo la entrada con params y VarTable local
        if err := semantics.FuncDeclaration(info.Name, info.Params, localVarCount, startQuad, 0); err != nil {
          semantics.Scopes.ExitScope()
          return nil, err
        }  

        return info, nil
      }()
    >>
  ;

Function
  : FunctionHeaderTwo Body r_square_par semicolon
    <<
      func() (Attrib, error) {
        info := X[0].(FuncInfo) // Obtener la información de la función
        // Obtener el conteo real de temporales usados
        tempCount := semantics.TempVar

        // Actualizar la entrada de la función con el TempCount correcto
        raw, exists := semantics.FunctionDirectory.Get(info.Name)
        if !exists {
            return nil, fmt.Errorf("función '%s' no encontrada", info.Name)
        }
        fs := raw.(semantics.FunctionStructure)
        fs.TempCount = tempCount
        semantics.FunctionDirectory.Put(info.Name, fs)

        fmt.Println("  - TempCount", info.Name, "a", tempCount)

        semantics.TempVar = 0

        // Generar ENDFUNC aquí (dentro de cada función)
        semantics.PushQuad("ENDFUNC", "_", "_", "_")

        // 2) cierro el scope local
        semantics.Scopes.ExitScope()

        return nil, nil
      }()
    >>
  ;

/* Lista de parámetros, siempre retorna un slice (no nil) */
Params
    : ParamList
      << 
        func() (Attrib, error) {
          // X[0] es el slice construido en ParamList
          list, ok := X[0].([]semantics.VariableStructure)
          if !ok {
            return nil, fmt.Errorf("esperaba []VariableStructure en ParamList, pero fue %T", X[0])
          }
          return list, nil
        }()
      >>
    | "empty"
      << []semantics.VariableStructure{}, nil >>
    ;

ParamList
  : id colon Type ParamListTail
    <<
      func() (Attrib, error) {
        // X[0]=id, X[2]=Type, X[3]=la cola
        nameTok := X[0].(*token.Token)
        tipoTok := X[2].(*token.Token)
        list := []semantics.VariableStructure{
          {Name: string(nameTok.Lit), Type: string(tipoTok.Lit)},
        }
        if tail, ok := X[3].([]semantics.VariableStructure); ok {
          list = append(list, tail...)
        }
        return list, nil
      }()
    >>
  ;

ParamListTail
  : comma id colon Type ParamListTail
    <<
      func() (Attrib, error) {
        // X[1]=id, X[3]=Type, X[4]=ParamListTail
        nameTok := X[1].(*token.Token)
        tipoTok := X[3].(*token.Token)
        list := []semantics.VariableStructure{
          {Name: string(nameTok.Lit), Type: string(tipoTok.Lit)},
        }
        if more, ok := X[4].([]semantics.VariableStructure); ok {
          list = append(list, more...)
        }
        return list, nil
      }()
    >>
  | "empty"
    << []semantics.VariableStructure{}, nil >>
  ;

/* BODY */
Body
    : l_curly_par StatementList r_curly_par
    ;

StatementList
    : Statement StatementList
    | "empty"
    ;

/* STATEMENT */
Statement
    : Assign
    | Condition
    | Cycle
    | FCall
    | Print
    ;

/* ASSIGN */
Assign
  : id assign Expression semicolon
    << 
      func() (Attrib, error) {
        name := string($0.(*token.Token).Lit)

        // Verifica que la variable exista
        if _, exists := semantics.Scopes.Current().Get(name); !exists {
          return nil, fmt.Errorf("error: variable '%s' no declarada", name)
        }

        // Obtener direccion
        // vs := raw.(semantics.VariableStructure)
        // targetAddr := vs.Address
        
        // Obtener el resultado final de la expresión (de la pila de operandos)
        rightOp, _ := semantics.PilaO.Pop()

        // Generar el cuadruplo de asignación
        // semantics.PushQuad("=", rightOp, "_", name)
        raw, _ := semantics.Scopes.Current().Get(name)
        vs := raw.(semantics.VariableStructure)
        semantics.PushQuad("=", rightOp, "_", vs.Address)

        //fmt.Printf("→ GENERATE QUAD: = %v -> %v\n", rightOp, name)
        //semantics.PrintQuads()
        return nil, nil
      }()
    >>
  ;

/* IF */
Condition
  : if ConditionTail Body Else semicolon
  <<
    func() (Attrib, error) {
      hasElse := $3.(bool)

      if hasElse {
        // 1. Pop del salto al final (GOTO)
        endJumpRaw, _ := semantics.PJumps.Pop()
        // 2. Pop del salto falso (GOTOF)
        falseJumpRaw, _ := semantics.PJumps.Pop()

        endJump := endJumpRaw.(int)
        falseJump := falseJumpRaw.(int)

        semantics.Quads[falseJump].Result = endJump + 1
        semantics.Quads[endJump].Result = len(semantics.Quads)
      } else {
        // Solo el salto falso (GOTOF)
        falseJumpRaw, _ := semantics.PJumps.Pop()
        falseJump := falseJumpRaw.(int)
        semantics.Quads[falseJump].Result = len(semantics.Quads)
      }

      return nil, nil
    }()
  >>
  ;

ConditionTail
  : l_round_par Expression r_round_par 
      <<
      func() (Attrib, error) {
        condAddr, _ := semantics.PilaO.Pop()
        condType, _ := semantics.PTypes.Pop()

        if condType != "bool" {
          return nil, fmt.Errorf("condición en if debe ser booleana, recibió: %v", condType)
        }

        // Cuádruplo GOTOF con dirección a rellenar luego
        semantics.PushQuad("GOTOF", condAddr, "_", -1)

        // Guardamos la posición del cuádruplo para backpatch
        semantics.PJumps.Push(len(semantics.Quads) - 1)

        return nil, nil
      }()
    >>
  ;

Else
    : else ElseTail Body
    <<
      func() (Attrib, error) {
        return true, nil // para saber que hay else
      }()
    >>
    | "empty"
    <<
      func() (Attrib, error) {
        return false, nil // para saber que NO hay else
      }()
    >>
    ;

ElseTail
    : empty
    <<
      func() (Attrib, error) {
        semantics.PushQuad("GOTO", "_", "_", -1)
        semantics.PJumps.Push(len(semantics.Quads) - 1)
        return nil, nil
      }()
    >>
    ;

/* CYCLE */
CycleHeader
  : while
  <<
    func() (Attrib, error) {
      // Guardamos el índice actual como el inicio del ciclo
      semantics.PJumps.Push(len(semantics.Quads))
      return nil, nil
    }()
  >>
  ;

Cycle
    : CycleHeader CycleExpression do Body CycleTail semicolon
    ;

CycleExpression
  : l_round_par Expression r_round_par
  <<
    func() (Attrib, error) {
      condAddr, _ := semantics.PilaO.Pop()
      condType, _ := semantics.PTypes.Pop()

      if condType != "bool" {
        return nil, fmt.Errorf("condición en while debe ser booleana, recibió: %v", condType)
      }

      // Genera GOTOF, y guarda su índice
      semantics.PushQuad("GOTOF", condAddr, "_", -1)
      semantics.PJumps.Push(len(semantics.Quads) - 1)
      return nil, nil
    }()
  >>
  ;

CycleTail
  : empty
  <<
    func() (Attrib, error) {
      // Primero sacamos los dos índices
      falseJumpRaw, _ := semantics.PJumps.Pop()  // GOTOF
      returnJumpRaw, _ := semantics.PJumps.Pop() // Inicio del ciclo

      falseJump := falseJumpRaw.(int)
      returnJump := returnJumpRaw.(int)

      semantics.PushQuad("GOTO", "_", "_", returnJump)

      semantics.Quads[falseJump].Result = len(semantics.Quads)

      return nil, nil
    }()
  >>
  ;

/* PRINT */
Print
    : print l_round_par PrintList r_round_par semicolon
    ;

PrintList
  : Expression PrintListTail
    <<
      func() (Attrib, error) {
        value, _ := semantics.PilaO.Pop()
        semantics.PushQuad("PRINT", value, "_", "_")
        return nil, nil
      }()
    >>
  | cte_string PrintListTail
    <<
      func() (Attrib, error) {
        tok := $0.(*token.Token)
        str := string(tok.Lit)
        addr := semantics.GetConstAddress(str, "string")
        semantics.PushQuad("PRINT", addr, "_", "_")
        return nil, nil
      }()
    >>
  ;

PrintListTail
  : comma Expression PrintListTail
    <<
      func() (Attrib, error) {
        value, _ := semantics.PilaO.Pop()
        semantics.PushQuad("PRINT", value, "_", "_")
        return nil, nil
      }()
    >>
  | comma cte_string PrintListTail
    <<
      func() (Attrib, error) {
        tok := $1.(*token.Token)
        str := string(tok.Lit)
        addr := semantics.GetConstAddress(str, "string")
        semantics.PushQuad("PRINT", addr, "_", "_")
        return nil, nil
      }()
    >>
  | "empty"
    << nil, nil >>
  ;

/* EXPRESSION */
Expression
    : Exp Operator Exp
    <<
        func() (Attrib, error) {
          // fmt.Println("→ DEBUG: Doing relational operation")
          err := semantics.DoRelational()
          if err != nil {
            return nil, err
          }
          // fmt.Printf("DEBUG: After relational, quads: %v\n", semantics.Quads)
          return nil, nil
        }()
      >>
    | Exp
    <<
      func() (Attrib, error) {
        //fmt.Println("→ RULE: Expression → Exp")
        return $0, nil
      }()
    >>
    ;

Operator
    : less_than
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: Operator → >")
          semantics.PushOp(">")
          return nil, nil
        }()
      >>
    | more_than
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: Operator → <")
          semantics.PushOp("<")
          return nil, nil
        }()
      >>
    | not_equal
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: Operator → !=")
          semantics.PushOp("!=")
          return nil, nil
        }()
      >>
    ;

/* EXP */
Exp
    : Term ExpList
    ;

ExpList
    : OperatorAdd Term ExpList
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: ExpList → OperatorAdd Term ExpList")
          _ = semantics.DoAddSub()
          return nil, nil
        }()
      >>
    | "empty"
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: ExpList → ε")
          _ = semantics.DoAddSub()
          return nil, nil
        }()
      >>
    ;

OperatorAdd
    : add
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorAdd → +")

          // Antes de meter el nuevo operador,
          // procesa si hay uno del mismo nivel (asociatividad izquierda)
          semantics.DoAddSub()

          semantics.PushOp("+")
          return nil, nil
        }()
      >>
    | rest
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorAdd → -")
          semantics.DoAddSub()
          semantics.PushOp("-")
          return nil, nil
        }()
      >>
    ;

/* TERM */
Term
    : Factor TermList
    ;

TermList
    : OperatorMul Factor TermList
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: TermList → OperatorMul Factor TermList")
          _ = semantics.DoMulDiv()
          return nil, nil
        }()
      >>
    | "empty"
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: TermList → ε")
          _ = semantics.DoMulDiv()
          return nil, nil
        }()
      >>
    ;

OperatorMul
    : multiply
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorMul → *")
          semantics.DoMulDiv()
          semantics.PushOp("*")
          return nil, nil
        }()
      >>
    | divide
      <<
        func() (Attrib, error) {
          //fmt.Println("→ RULE: OperatorMul → /")
          semantics.DoMulDiv()
          semantics.PushOp("/")
          return nil, nil
        }()
      >>
    ;

/* FACTOR */
Factor
  : FakeBottom Expression CloseParen
  | Cte
    <<
      func() (Attrib, error) {
        cteToken := $0.(*token.Token)
        value := string(cteToken.Lit)
        tipo := "int"
        if strings.Contains(value, ".") {
          tipo = "float"
        }
        semantics.PushOperandDebug(value, tipo)

        return cteToken, nil
      }()
    >>
  | id
    <<
      func() (Attrib, error) {
        name := string($0.(*token.Token).Lit)
        //fmt.Printf("→ DEBUG Factor: intentando usar variable '%s'\n", name)

        raw, exists := semantics.Scopes.Current().Get(name)
        if !exists {
          return nil, fmt.Errorf("error: variable '%s' no declarada", name)
        }

        vs := raw.(semantics.VariableStructure)
        semantics.PushOperandDebug(vs.Address, vs.Type)

        // devolvemos el token para que la propia producción lo use en la AST
        return $0, nil
      }()
    >>
  | add Factor
  | rest Factor
  ;

FakeBottom
  : l_round_par
    <<
      func() (Attrib, error) {
        semantics.PushOp("⏊")
        //fmt.Println("→ PUSH OPERADOR: ⏊ (fondo falso)")
        return nil, nil
      }()
    >>
  ;

CloseParen
  : r_round_par
    <<
      func() (Attrib, error) {
        err := semantics.PopUntilFakeBottom()
        return nil, err
      }()
    >>
  ;

/* CTE */
Cte
    : cte_int
    | cte_float
    ;


/* F_CALL */
FEra 
  : id
  <<
      func() (Attrib, error) {
        // 1) Extraer nombre de la función
        fnTok, ok := $0.(*token.Token)
        if !ok {
          return nil, fmt.Errorf("esperaba identificador de función, pero fue %T", $0)
        }
        name := string(fnTok.Lit)

        // 3) Comprobar que la función exista
        _, exists := semantics.FunctionDirectory.Get(name)
        if !exists {
          return nil, fmt.Errorf("error: función '%s' no declarada", name)
        }

        // Tamaño = variables locales + temporales + parámetros
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)
        size := fs.LocalVarCount + fs.TempCount + fs.ParamCount
        semantics.PushQuad("ERA", "_", "_", size)

        return $0, nil
      }()
    >>
  ;

FCall
  : FEra l_round_par FCallList r_round_par semicolon
    <<
      func() (Attrib, error) {
        fnTok := $0.(*token.Token)
        name := string(fnTok.Lit)
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)

        // 2) Recuperar slice de argumentos
        args, ok := $2.([]Attrib)
        if !ok {
          return nil, fmt.Errorf("esperaba []Attrib en FCallList, pero fue %T", $2)
        }

        // 4) Aridad correcta?
        if len(args) != len(fs.Parameters) {
          return nil, fmt.Errorf(
            "error: función '%s' espera %d argumentos, recibió %d",
            name, len(fs.Parameters), len(args),
          )
        }

        // 5) Verificar tipo de cada argumento
        for i, arg := range args {
          var argType string

          // 5a) Literal numérico
          if tokArg, ok := arg.(*token.Token); ok {
            lit := string(tokArg.Lit)
            if strings.Contains(lit, ".") {
              argType = "float"
            } else {
              argType = "int"
            }
          } else {
            // 5b) Variable: buscar su tipo en el scope actual
            varName := string(arg.(*token.Token).Lit)
            rawVar, okVar := semantics.Scopes.Current().Get(varName)
            if okVar {
              vs := rawVar.(semantics.VariableStructure)
              argType = vs.Type
            } else {
              // si no está, el chequeo de existencia ya fallará en Assign/Factor
              argType = "unknown"
            }
          }

          expected := fs.Parameters[i].Type
          if argType != expected {
            return nil, fmt.Errorf(
              "error: función '%s' espera %s en el parámetro %d, recibió %s",
              name, expected, i+1, argType,
            )
          }
        }

        return $0, nil
      }()
    >>
  ;

/* FCallList: siempre devuelve un []Attrib (nunca nil) */
FCallList
    : Expression FCallListTail
      <<
        func() (Attrib, error) {
          first := $0.(Attrib)
          tail, _ := $1.([]Attrib)
          return append([]Attrib{first}, tail...), nil
        }()
      >>
    | "empty"
      << []Attrib{}, nil >>
    ;

/* FCallListTail: cola para concatenar más argumentos */
FCallListTail
    : comma Expression FCallListTail
      <<
        func() (Attrib, error) {
          //fmt.Printf("→ DEBUG FCallListTail: $1=%T (%v), $2=%T (%v)\n", $1, $1, $2, $2)
          if $1 == nil {
            return nil, fmt.Errorf("FCallListTail error: argumento nulo en expresión")
          }

          arg := $1.(Attrib)

          var more []Attrib
          if $2 != nil {
            more = $2.([]Attrib)
          } else {
            more = []Attrib{}
          }

          return append([]Attrib{arg}, more...), nil
        }()
      >>
    | "empty"
      << []Attrib{}, nil >>
    ;

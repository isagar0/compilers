/*-------------------------- Scanner(Lexical) -------------------------- */

/* Palabras Clave */
program      : 'p''r''o''g''r''a''m' ;
main         : 'm''a''i''n' ;
end          : 'e''n''d' ;
var          : 'v''a''r' ;
int          : 'i''n''t' ;
float        : 'f''l''o''a''t' ;
print        : 'p''r''i''n''t' ;
while        : 'w''h''i''l''e' ;
do           : 'd''o' ;
if           : 'i''f' ;
else         : 'e''l''s''e' ;
void         : 'v''o''i''d' ;

/* ID */
_lowcase     : 'a'-'z' ;
_upcase      : 'A'-'Z' ;
_digit       : '0'-'9' ;
id           : (_lowcase | _upcase) { (_lowcase | _upcase | _digit | '_') } ;

/* Constantes */
_special : ' ' | '!' | '#' | '$' | '%' | '&' | '\'' | '(' | ')' | '*' | '+' | ',' | '-' | '.' | '/' |
           ':' | ';' | '<' | '=' | '>' | '?' | '@' |
           '[' | ']' | '^' | '_' | '`' | '{' | '|' | '}' | '~' ;
_chars       : _lowcase | _upcase | _special | _digit ;
cte_int      : _digit { _digit } ;
cte_float    : _digit { _digit } '.' _digit { _digit } ;
cte_string   : '"' {_chars} '"' ;

/* Operadores */
assign       : '=' ;
not_equal    : '!''=' ;
less_than    : '>' ;
more_than    : '<' ;
add          : '+' ;
rest         : '-' ;
multiply     : '*' ;
divide       : '/' ;

/* Simbolos especiales */
semicolon    : ';' ;
colon        : ':' ;
comma        : ',' ;
l_round_par  : '(' ;
r_round_par  : ')' ;
l_curly_par  : '{' ;
r_curly_par  : '}' ;
l_square_par : '[' ;
r_square_par : ']' ;

/* Ignorar */
!whitespace  : ' ' | '\t' | '\n' | '\r' ;

/* -------------------------- Parser (Syntax) -------------------------- */
<<
  import (
    "fmt"
    "strings"
    "baby_duck/semantics"
    "baby_duck/token"
  )
>>

/* PROGRAM */
Program
  : PBody PTail
  ;

PBody
  : PHeader Vars FunctionList main
    <<
      func() (Attrib, error) {
        semantics.HandlePBody($0)
        return nil, nil
      }()
    >>
  ;

PHeader
  : program id semicolon
  << semantics.HandlePHeader($1) >>
  ;

PTail
  : Body end
  <<
      func() (Attrib, error) {
        // 2) Generar ENDFUNC
        semantics.PushQuad("END", "_", "_", "_")

        return nil, nil
      }()
    >>
  ;

FunctionList
    : Function FunctionList
    | "empty"
    ;

/* VARS */
Vars
    : VarDecl Vars
    | "empty"
    ;

VarDecl
    : var IdList colon Type semicolon
    << 
      func() (Attrib, error) {
        semantics.HandleVarDecl($1, $3) 
        return nil, nil
      }()
    >>
    ;

IdList
    : id IdListTail
    <<
        func() (Attrib, error) {
            if token, ok := $0.(*token.Token); ok {
                idList := []string{string(token.Lit)}
                if $1 != nil {
                    idList = append(idList, $1.([]string)...)
                }
                return idList, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", $0)
            }
        }()
    >>
    ;

IdListTail
    : comma id IdListTail
    <<
        func() (Attrib, error) {
            if token, ok := $1.(*token.Token); ok {
                ids := []string{string(token.Lit)}
                if $2 != nil {
                    ids = append(ids, $2.([]string)...)
                }
                return ids, nil
            } else {
                return nil, fmt.Errorf("esperaba un token, pero se encontró: %T", $1)
            }
        }()
    >>
    | "empty"
    << []string{}, nil >>
    ;

/* TYPE */
Type
    : int
    << $0.(*token.Token), nil >>
    | float
    << $0.(*token.Token), nil >>
    ;

/* FUNCS */
FunctionHeader
  : void id l_round_par Params r_round_par l_square_par
    << semantics.HandleFunctionHeader($1, $3) >>
  ;

FunctionHeaderTwo
  : FunctionHeader Vars
  << semantics.HandleFunctionHeaderTwo($0) >>
  ;

Function
  : FunctionHeaderTwo Body r_square_par semicolon
    <<
      func() (Attrib, error) {
        semantics.HandleFunction($0)
        return nil, nil
      }()
    >>
  ;

/* Lista de parámetros, siempre retorna un slice (no nil) */
Params
    : ParamList
      << 
        func() (Attrib, error) {
          // X[0] es el slice construido en ParamList
          list, ok := X[0].([]semantics.VariableStructure)
          if !ok {
            return nil, fmt.Errorf("esperaba []VariableStructure en ParamList, pero fue %T", X[0])
          }
          return list, nil
        }()
      >>
    | "empty"
      << []semantics.VariableStructure{}, nil >>
    ;

ParamList
  : id colon Type ParamListTail
    <<
      func() (Attrib, error) {
        param, err := semantics.HandleParam($0, $2)
        if err != nil {
            return nil, err
        }
        tail, _ := $3.([]semantics.VariableStructure)
        return append([]semantics.VariableStructure{param}, tail...), nil
      }()
    >>
  ;

ParamListTail
  : comma id colon Type ParamListTail
    <<
      func() (Attrib, error) {
        param, err := semantics.HandleParam($1, $3)
        if err != nil {
            return nil, err
        }
        tail, _ := $4.([]semantics.VariableStructure)
        return append([]semantics.VariableStructure{param}, tail...), nil
      }()
    >>
  | "empty"
    << []semantics.VariableStructure{}, nil >>
  ;

/* BODY */
Body
    : l_curly_par StatementList r_curly_par
    ;

StatementList
    : Statement StatementList
    | "empty"
    ;

/* STATEMENT */
Statement
    : Assign
    | Condition
    | Cycle
    | FCall
    | Print
    ;

/* ASSIGN */
Assign
  : id assign Expression semicolon
    << 
      func() (Attrib, error) {
        semantics.HandleAssign($0) 
        return nil, nil
      }()
    >>
  ;

/* IF */
Condition
  : if ConditionTail Body Else semicolon
  <<
    func() (Attrib, error) {
      semantics.HandleCondition($3.(bool))
      return nil, nil
    }()
  >>
  ;

ConditionTail
  : l_round_par Expression r_round_par 
      << 
        func() (Attrib, error) {
          semantics.HandleConditionTail() 
          return nil, nil
        }()
      >>
  ;

Else
    : else ElseTail Body
    <<
      func() (Attrib, error) {
        return true, nil // para saber que hay else
      }()
    >>
    | "empty"
    <<
      func() (Attrib, error) {
        return false, nil // para saber que NO hay else
      }()
    >>
    ;

ElseTail
    : empty
    <<
      func() (Attrib, error) {
        semantics.HandleElseTail()
        return nil, nil
      }()
    >>
    ;

/* CYCLE */
CycleHeader
  : while
  <<
    func() (Attrib, error) {
      semantics.HandleCycleHeader()
      return nil, nil
    }()
  >>
  ;

Cycle
    : CycleHeader CycleExpression do Body CycleTail semicolon
    ;

CycleExpression
  : l_round_par Expression r_round_par
  <<
    func() (Attrib, error) {
      semantics.HandleCycleExpression()
      return nil, nil
    }()
  >>
  ;

CycleTail
  : empty
  <<
    func() (Attrib, error) {
      semantics.HandleCycleTail()
      return nil, nil
    }()
  >>
  ;

/* PRINT */
Print
    : print l_round_par PrintList r_round_par semicolon
    ;

PrintList
  : Expression PrintListTail
    <<
      func() (Attrib, error) {
        semantics.HandlePrintExpression()
        return nil, nil
      }()
    >>
  | cte_string PrintListTail
    <<
      func() (Attrib, error) {
        semantics.HandlePrintString($0)
        return nil, nil
      }()
    >>
  ;

PrintListTail
  : comma Expression PrintListTail
    <<
      func() (Attrib, error) {
        semantics.HandlePrintExpression()
        return nil, nil
      }()
    >>
  | comma cte_string PrintListTail
    <<
      func() (Attrib, error) {
        semantics.HandlePrintString($1)
        return nil, nil
      }()
    >>
  | "empty"
    << nil, nil >>
  ;

/* EXPRESSION */
Expression
    : Exp Operator Exp
    <<
        func() (Attrib, error) {
          err := semantics.DoRelational()
          if err != nil {
            return nil, err
          }
          return nil, nil
        }()
      >>
    | Exp
    <<
      func() (Attrib, error) {
        return $0, nil
      }()
    >>
    ;

Operator
    : less_than
      <<
        func() (Attrib, error) {
          semantics.PushOp(">")
          return nil, nil
        }()
      >>
    | more_than
      <<
        func() (Attrib, error) {
          semantics.PushOp("<")
          return nil, nil
        }()
      >>
    | not_equal
      <<
        func() (Attrib, error) {
          semantics.PushOp("!=")
          return nil, nil
        }()
      >>
    ;

/* EXP */
Exp
    : Term ExpList
    ;

ExpList
    : OperatorAdd Term ExpList
      <<
        func() (Attrib, error) {
          _ = semantics.DoAddSub()
          return nil, nil
        }()
      >>
    | "empty"
      <<
        func() (Attrib, error) {
          _ = semantics.DoAddSub()
          return nil, nil
        }()
      >>
    ;

OperatorAdd
    : add
      <<
        func() (Attrib, error) {
          semantics.DoAddSub()
          semantics.PushOp("+")
          return nil, nil
        }()
      >>
    | rest
      <<
        func() (Attrib, error) {
          semantics.DoAddSub()
          semantics.PushOp("-")
          return nil, nil
        }()
      >>
    ;

/* TERM */
Term
    : Factor TermList
    ;

TermList
    : OperatorMul Factor TermList
      <<
        func() (Attrib, error) {
          _ = semantics.DoMulDiv()
          return nil, nil
        }()
      >>
    | "empty"
      <<
        func() (Attrib, error) {
          _ = semantics.DoMulDiv()
          return nil, nil
        }()
      >>
    ;

OperatorMul
    : multiply
      <<
        func() (Attrib, error) {
          semantics.DoMulDiv()
          semantics.PushOp("*")
          return nil, nil
        }()
      >>
    | divide
      <<
        func() (Attrib, error) {
          semantics.DoMulDiv()
          semantics.PushOp("/")
          return nil, nil
        }()
      >>
    ;

/* FACTOR */
Factor
  : FakeBottom Expression CloseParen
  | Cte
    <<
      func() (Attrib, error) {
        cteToken := $0.(*token.Token)
        value := string(cteToken.Lit)
        tipo := "int"
        if strings.Contains(value, ".") {
          tipo = "float"
        }
        semantics.PushOperandDebug(value, tipo)

        return cteToken, nil
      }()
    >>
  | id
    <<
      func() (Attrib, error) {
        name := string($0.(*token.Token).Lit)
        raw, exists := semantics.Scopes.Current().Get(name)
        if !exists {
          return nil, fmt.Errorf("error: variable '%s' no declarada", name)
        }

        vs := raw.(semantics.VariableStructure)
        semantics.PushOperandDebug(vs.Address, vs.Type)

        return $0, nil
      }()
    >>
  | add Factor
  | rest Factor
  ;

FakeBottom
  : l_round_par
    <<
      func() (Attrib, error) {
        semantics.PushOp("⏊")
        return nil, nil
      }()
    >>
  ;

CloseParen
  : r_round_par
    <<
      func() (Attrib, error) {
        err := semantics.PopUntilFakeBottom()
        return nil, err
      }()
    >>
  ;

/* CTE */
Cte
    : cte_int
    | cte_float
    ;


/* F_CALL */
FEra 
  : id
  <<
      func() (Attrib, error) {
        token, ok := $0.(*token.Token)
        if !ok {
            return nil, fmt.Errorf("internal error: expected token for function name")
        }
        name := string(token.Lit)
        raw, exists := semantics.FunctionDirectory.Get(name)
        if !exists {
            return nil, fmt.Errorf("error: función '%s' no declarada", name)
        }
        if _, ok := raw.(semantics.FunctionStructure); !ok {
            return nil, fmt.Errorf("internal error: entry for function '%s' is not a FunctionStructure", name)
        }
        semantics.HandleFEra($0)
        return $0, nil
      }()
    >>
  ;

FCall
  : FEra l_round_par FCallList r_round_par semicolon
    <<
      func() (Attrib, error) {
        fnTok := $0.(*token.Token)
        name := string(fnTok.Lit)
        raw, _ := semantics.FunctionDirectory.Get(name)
        fs := raw.(semantics.FunctionStructure)

        n := len(fs.Parameters)
        args, _ := $2.([]Attrib)
        
        // 1. Verificar aridad usando las pilas
        if len(args) != n {
            return nil, fmt.Errorf(
                "error: función '%s' espera %d argumentos, recibió %d",
                name, n, len(args),
            )
        }

        // Sacar argumentos de las pilas (en orden inverso)
        for i := n - 1; i >= 0; i-- {
            addr, _ := semantics.PilaO.Pop()
            tipoRaw, _ := semantics.PTypes.Pop()
            tipo, _ := tipoRaw.(string)
            
            // Verificar tipo
            expectedType := fs.Parameters[i].Type
            if tipo != expectedType {
                return nil, fmt.Errorf(
                    "error: parámetro %d tipo incorrecto, esperaba %s, obtuvo %s",
                    n-i, expectedType, tipo,
                )
            }
            
            // Generar PARAMETER con índice (i+1)
            semantics.PushQuad("PARAMETER", addr, "_", i+1)

            fmt.Println(addr, i+1)
        }

        // 4. Generar GOSUB
        semantics.PushQuad("GOSUB", name, "_", fs.StartQuad)

        return $0, nil
      }()
    >>
  ;

/* FCallList: siempre devuelve un []Attrib (nunca nil) */
FCallList
    : Expression FCallListTail
      <<
        func() (Attrib, error) {
          first := $0.(Attrib)
          tail, _ := $1.([]Attrib)
          return append([]Attrib{first}, tail...), nil
        }()
      >>
    | "empty"
      << []Attrib{}, nil >>
    ;

/* FCallListTail: cola para concatenar más argumentos */
FCallListTail
    : comma Expression FCallListTail
      <<
        func() (Attrib, error) {
          //fmt.Printf("→ DEBUG FCallListTail: $1=%T (%v), $2=%T (%v)\n", $1, $1, $2, $2)
          if $1 == nil {
            return nil, fmt.Errorf("FCallListTail error: argumento nulo en expresión")
          }

          arg := $1.(Attrib)

          var more []Attrib
          if $2 != nil {
            more = $2.([]Attrib)
          } else {
            more = []Attrib{}
          }

          return append([]Attrib{arg}, more...), nil
        }()
      >>
    | "empty"
      << []Attrib{}, nil >>
    ;
